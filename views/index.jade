doctype html
html
    head
        title Device Management
        link(href='//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css', rel='stylesheet')
        link(href='stylesheets/style.css', rel='stylesheet')
        script(type='text/javascript', src="https://code.jquery.com/jquery-2.1.3.js")
        script(type='text/javascript', src="javascripts/management.js")
        script(type='text/javascript', src="javascripts/canvasjs.min.js")

        
    body
        div.container
            div.jumbotron
                h1 Devices
                p View, manage and control the devices in your network from here.
        
        div(class="panel panel-default"  style="float: none; width: 960px; margin-left:auto; margin-right:auto;")  
            div(class="panel-heading") Available Devices     
            div(class="panel-body")
                ul#devices
                    each device, index in devices
                        li.device
                            img(src="images/device_icon.png").device_icon
                            div.properties
                                div.device_id.title Device ID:
                                    div.value #{device.sessionId}
                                |     
                                div.manufacturer.title Manufacturer: 
                                    div.value #{device.manufacturer}
                                |     
                                div.model.title Model: 
                                    div.value #{device.model}
                                |     
                                div.geo.title Geo-location
                                  div.longitude Longitude: 
                                    div.value #{device.geo.longitude}
                                  |       &#x9;
                                  div.latitude.title Latitude:
                                    div.value  #{device.geo.latitude}
                                | 
                                div.sensors
                                  each sensor, sindex in device.sensors
                                      div.sensor
                                        div.sensor_id.title Sensor ID:
                                            div.value  #{sensor.id}
                                        |         
                                        div.sensor_name.title Name:
                                            div.value  #{sensor.name}
                                        |         
                                        div.sensor_sense.title Capability:
                                            div.value  #{sensor.sense}
                                        |         
                                        div.sensor_unit.title Unit:
                                            div.value  #{sensor.unit}
                                        |         
                                        div.sensor_type.title Type:
                                            div.value  #{sensor.type}
                                        |         
                                        div.sensor_stream
                                          div(id= "chart_dev"+device.sessionId+"_sen"+sensor.id).sensor_chart
                                          button.streamBtn.startSensorStream Start stream
                                          button.streamBtn.stopSensorStream Stop stream
                                |     
                                div.actuators
                                  each actuator, aindex in device.actuators
                                      div.actuator
                                        div.actuator_id.title Actuator ID: 
                                            div.value #{actuator.id}
                                        |         
                                        div.actuator_name.title Name:
                                            div.value #{actuator.name}
                                        |         
                                        div.options.title Options
                                          each option in actuator.options
                                            br
                                            button.optionBtn #{option}


    script(type='text/javascript').
        $( document ).ready(function() {

            var neuronURL = "http://localhost:9998/api/";

            // Toggle device properties by clicking the icon
            $(".properties").hide();

            $(".device_icon").click(function(event) {
                $(this).siblings().toggle();
            });

            var Chart = function() {
                console.log("Created new Chart");
                this.dps = [];
                this.model;
                this.counter = 0;
                this.ready = false;
            }
            Chart.prototype.load = function(id, title, xtitle, ytitle) {
                console.log("load called, with parameters [" + id + ", " + title + ", " + xtitle + ", " + ytitle + "]");
                this.model = new CanvasJS.Chart(id, {
                        title : { text: title},
                        axisX : { title: xtitle },
                        axisY : { title: ytitle },
                        data : [{
                            type: "line",
                            dataPoints : this.dps
                            }]
                        });
                console.log("Model set: " + this.model);
                this.model.render();
                this.ready = true;
            }
            Chart.prototype.isReady = function(){
                console.log("isReady called, returning " + this.ready);
                return this.ready;
            }
            Chart.prototype.update = function(y_) {
                console.log("update called, adding " + y_ + " data point. Counter is currently set to " + this.counter);
                this.dps.push({x: this.counter,y: y_});
                this.counter++;
                if(this.dps.length > 10) {
                    this.dps.shift();
                }
                this.model.render();
            }

            //Open a new eventsource on button press
            $(".startSensorStream").click(function(event) {

                var sensor = $(event.target).parents();
                var deviceId = sensor.closest(".properties").children().children().html().trim();
                var sensorId = sensor.closest(".sensor").children().children().html().trim();
                var url = neuronURL + "devices/" + deviceId + "/sensors/" + sensorId + "/stream";

                if(sensor.chart == null) {
                    sensor.chart = new Chart();
                }
                if(!sensor.chart.isReady()) {
                    sensor.chart.load("chart_dev"+deviceId+"_sen"+sensorId, "Live Sensor " + sensorId + " Data", "Count", "Unit");
                }

                console.log("Starting sensor stream on URL: " + url);
                sensor.eventSource = new EventSource(url);

                sensor.eventSource.onopen = function() {
                    console.log("Opened client SSE connection");
                }
                sensor.eventSource.onmessage = function(message) {
                    console.log("new data received: " + message.data);
                    var json = message.data;
                    dataPack = JSON.parse(json);
                    console.log("data: " + dataPack.data);
                    if(dataPack.data == "CLOSE") {
                        sensor.eventSource.close();
                        delete sensor.eventSource;
                    } else {
                        if(sensor.chart.isReady()) {
                            sensor.chart.update(dataPack.data);
                        }
                    }
                }
                sensor.eventSource.onerror = function(error) {
                    console.log("error: " + error.data);
                }
            });

            //Close the eventsource on button press
            $(".stopSensorStream").click(function(event) {

                var btn = $(event.target);
                var sensor = btn.parents();
                var deviceId = sensor.closest(".properties").children().children().html().trim();
                var sensorId = sensor.closest(".sensor").children().children().html().trim();
                var url = neuronURL + "devices/" + deviceId + "/sensors/" + sensorId + "/stream";

                var xhr = new XMLHttpRequest();
                var params = "";
                xhr.open("POST", url, true);
                xhr.setRequestHeader("Content-Type", "application/json");
                xhr.send(params);
            });

            //Send an option to the server
            $(".optionBtn").click(function(event) {

                console.log("Clicked option");

                var btn = $(event.target);
                var sensor = btn.parents();
                var deviceId = sensor.closest(".properties").children().children().html().trim();
                var actuatorId = sensor.closest(".actuator").children().children().html().trim();
                var url = neuronURL + "devices/" + deviceId + "/actuators/" + actuatorId;

                console.log("url: " + url);
                var option = btn.text();
                console.log("option: " + option);
                var xhr = new XMLHttpRequest();
                var params = "{ \"data\": \"" + option + "\"}";
                xhr.open("POST", url, true);
                xhr.setRequestHeader("Content-Type", "application/json");
                xhr.send(params);

            });
        });
